{"version":3,"sources":["webpack:///webpack/bootstrap d94fadedc3c95ef53c99","webpack:///./lib/grid.js","webpack:///./lib/unit.js","webpack:///./lib/world_board.js","webpack:///./lib/tile.js","webpack:///./lib/player.js","webpack:///./lib/rule_the_realm.js","webpack:///./lib/game.js","webpack:///./lib/battle_board.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;AC7DA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,QAAQ;;AAEtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AAAA;AAAA;;AAEA;AACA;;AAEA,iBAAiB,OAAO;AACxB;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,iBAAiB,OAAO;AACxB;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,OAAO;AACxB;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,CAAC;AAAA;AAAA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,uBAAuB;AACxC;AACA,mFAAqC,OAAO,GAAG,OAAO,GAAG,OAAO;AAChE;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;AC5MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC9EA;AAGE;AACF;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAA8B,OAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,EAAE,IAAI,EAAE,IAAI,EAAE;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA,sBAAsB,OAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;ACxEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP,iDAAiD,SAAS;AAC1D;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,yEAAuB,cAAc;AACrC,yEAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;;AAGA;;;;;;;;;;AC3PA;AACqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,sEAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC,qBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AC/DE;AACF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA,4BAA4B,cAAc,IAAI,eAAe;AAC7D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA,4BAA4B,cAAc,IAAI,eAAe;AAC7D;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA,0BAA0B,SAAS,IAAI,8BAA8B;AACrE;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qBAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+BAA+B;AACtD;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;;AAGH;AACA,CAAC;;;;;;;;;;;;;;;ACjMD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B,wBAAwB;AACvD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;AC3DA;;AAEA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d94fadedc3c95ef53c99","import _ from 'lodash';\nimport Unit from './unit';\n\nlet center = [40, 200];\nlet size = 30;\nlet startX = 65;\nlet startY = 160;\n\nexport const GRID_COORDS = {\n  '168.92304845413264,70': [3, -3, 0],\n  '220.88457268119896,70': [2, -3, 1],\n  '272.8460969082653,70': [1, -3, 2],\n  '324.80762113533154,70': [0, -3, 3],\n  '142.94228634059948,115': [3, -2, -1],\n  '194.9038105676658,115': [2, -2, 0],\n  '246.86533479473212,115': [1, -2, 1],\n  '298.82685902179844,115': [0, -2, 2],\n  '350.7883832488647,115': [-1, -2, 3],\n  '116.96152422706632,160': [3, -1, -2],\n  '168.92304845413264,160': [2, -1, -1],\n  '220.88457268119896,160': [1, -1, 0],\n  '272.8460969082653,160': [0, -1, 1],\n  '324.8076211353316,160': [-1, -1, 2],\n  '376.76914536239786,160': [-2, -1, 3],\n  '90.98076211353316,205': [3, 0, -3],\n  '142.94228634059948,205': [2, 0, -2],\n  '194.9038105676658,205': [1, 0, -1],\n  '246.86533479473212,205': [0, 0, 0],\n  '298.82685902179844,205': [-1, 0, 1],\n  '350.78838324886476,205': [-2, 0, 2],\n  '402.749907475931,205': [-3, 0, 3],\n  '116.96152422706632,250': [2, 1, -3],\n  '168.92304845413264,250': [1, 1, -2],\n  '220.88457268119896,250': [0, 1, -1],\n  '272.8460969082653,250': [-1, 1, 0],\n  '324.8076211353316,250': [-2, 1, 1],\n  '376.7691453623979,250': [-3, 1, 2],\n  '142.94228634059948,295': [1, 2, -3],\n  '194.9038105676658,295': [0, 2, -2],\n  '246.86533479473212,295': [-1, 2, -1],\n  '298.82685902179844,295': [-2, 2, 0],\n  '350.78838324886476,295': [-3, 2, 1],\n  '168.92304845413264,340': [0, 3, -3],\n  '220.88457268119896,340': [-1, 3, -2],\n  '272.8460969082653,340': [-2, 3, -1],\n  '324.8076211353316,340': [-3, 3, 0],\n};\n\nexport const selectTile = (e, worldBoard, canvasEl, centers, ctx) => {\n  let rect = canvasEl.getBoundingClientRect();\n  let x = e.clientX - rect.left;\n  let y = e.clientY - rect.top;\n  let closest = centers[0];\n  let distX = x - closest[0];\n  let distY = y - closest[1];\n  let minDist = Math.sqrt(distX * distX + distY * distY);\n  for (let i = 1; i < centers.length; i++) {\n    distX = x - centers[i][0];\n    distY = y - centers[i][1];\n    let dist = Math.sqrt(distX * distX + distY * distY);\n    if (dist < minDist) {\n      minDist = dist;\n      closest = centers[i];\n    }\n  }\n\n  let coords = GRID_COORDS[`${closest}`];\n\n  ctx.clearRect(0, 0, canvasEl.width, canvasEl.height);\n  buildHexGrid(ctx);\n  hexagon(closest, ctx);\n  ctx.fillStyle = 'rgba(0,0,0,0.3)';\n  ctx.fill();\n  let tile = worldBoard.grid[coords[0]][coords[1]][coords[2]];\n\n  return tile;\n};\n\nconst hexCorner = (closest, i) => {\n  let angleDeg = 60 * i + 30;\n  let angleRad = Math.PI / 180 * angleDeg;\n  return [closest[0] + size * Math.cos(angleRad),\n          closest[1] + size * Math.sin(angleRad)];\n};\n\nexport const hexagon = (closest, ctx) => {\n  ctx.strokeStyle = 'rgb(0, 0, 0)';\n  ctx.fillStyle = 'rgb(255, 255, 255)';\n  ctx.beginPath();\n  let point = hexCorner(closest, 0);\n  ctx.moveTo(point[0], point[1]);\n  for (let i = 1; i <= 6; i++) {\n    point = hexCorner(closest, i);\n    ctx.lineTo(point[0], point[1]);\n  }\n  ctx.closePath();\n  ctx.stroke();\n  ctx.fill();\n};\n\nexport const drawImage = (image, point, ctx) => {\n  image.addEventListener(\"load\", () => (\n    ctx.drawImage(image, point[0] - 10, point[1] - 10, 30, 30)\n  ));\n};\n\nexport const drawTile = (image, point, ctx) => {\n  image.addEventListener(\"load\", () => {\n    ctx.save();\n    ctx.globalAlpha = 0.7;\n    ctx.drawImage(image, point[0] - 25, point[1] - 30, 51, 60);\n    ctx.restore();\n  });\n};\n\nexport const buildHexGrid = (ctx) => {\n  let centers = [];\n\n  for (let j = 0; j < 4; j++) {\n    center = [startX + j * size * Math.sqrt(3) / 2,\n      startY - size * j * 1.5];\n    for (let i = 0; i < 4; i++) {\n      center = [center[0] + size * Math.sqrt(3) / 2,\n                center[1] + size * 1.5];\n      hexagon(center, ctx);\n      centers.push(center);\n    }\n  }\n\n  let bottomStart = center;\n\n  for (let j = 0; j < 3; j++) {\n    center = [startX + (5 + j) * size * Math.sqrt(3) / 2, startY - size * 3 * 1.5];\n    center = [center[0] + j * size * Math.sqrt(3) / 2, center[1]];\n    for (let i = 1; i < 5; i++) {\n      center = [center[0] + size * Math.sqrt(3) / 2,\n                center[1] + size * 1.5];\n      hexagon(center, ctx);\n      centers.push(center);\n    }\n  }\n\n  for (let j = 1; j < 4; j++) {\n    center = bottomStart;\n    center = [center[0] + j * size * Math.sqrt(3), center[1]];\n    for (let i = 1; i < 4; i++) {\n      center = [center[0] - size * Math.sqrt(3) / 2,\n                center[1] + size * 1.5];\n      hexagon(center, ctx);\n      centers.push(center);\n    }\n  }\n  return centers;\n};\n\nexport const gridCoords = Object.keys(_.invert(GRID_COORDS)).map(coord => {\n  coord = coord.split(',');\n  return [parseInt(coord[0]), parseInt(coord[1]), parseInt(coord[2])];\n});\n\nconst renderPlayerTiles = (point, tile, ctx) => {\n  ctx.lineWidth = 3;\n  if (tile.owner === 'player1') {\n    hexagon(point, ctx);\n    ctx.strokeStyle = 'rgba(0, 0, 255, 0.5)';\n    ctx.stroke();\n  } else if (tile.owner === 'player2') {\n    hexagon(point, ctx);\n    ctx.strokeStyle = 'rgba(255, 0, 0, 0.5)';\n    ctx.stroke();\n  }\n  ctx.lineWidth = 1;\n};\n\nconst renderUnits = (point, tile, image, ctx) => {\n  if (tile.units.length > 0) {\n    for (let j = 0; j < tile.units.length; j++) {\n      let unit = tile.units[j];\n      image = new Image();\n      image.src = unit.imageUrl;\n      if (j < 5) {\n        drawImage(image, [point[0] - j * 5, point[1] - j * 5], ctx);\n      } else {\n        drawImage(image, [point[0] + 45 - j * 5, point[1] + 15 - j * 5], ctx);\n      }\n    }\n  }\n};\n\nexport const renderWorldBoard = (worldBoard, ctx) => {\n  let point;\n  for (let i = 0; i < gridCoords.length; i++) {\n    let tile = worldBoard.grid[gridCoords[i][0]][gridCoords[i][1]][gridCoords[i][2]];\n    point = _.invert(GRID_COORDS)[`${tile.x},${tile.y},${tile.z}`]\n    .split(',').map(coord => (parseInt(coord)));\n    let image = new Image();\n\n    if (tile.owner !== 'none') {\n      image.src = tile.attributes.imageUrl;\n      drawTile(image, point, ctx);\n    }\n\n    renderPlayerTiles(point, tile, ctx);\n\n    renderUnits(point, tile, image, ctx);\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/grid.js\n// module id = 0\n// module chunks = 0","\n\nclass Unit {\n  constructor(type, owner = null) {\n    this.type = type;\n    let attributes = UNITS[type];\n    this.attack = attributes['attack'];\n    this.defense = attributes['defense'];\n    this.range = attributes['range'];\n    this.cost = attributes['cost'];\n    this.imageUrl = attributes['imageUrl'];\n    this.owner = owner;\n    this.battleMoves = 2;\n    this.worldMoved = false;\n    this.level = 1;\n    this.selected = false;\n  }\n\n  levelUp(type) {\n    this.level++;\n    switch (type) {\n      case 'attack':\n        this.attack += 1;\n        break;\n      case 'defense':\n        this.defense += 1;\n        break;\n      default:\n    }\n  }\n}\n\nexport default Unit;\n\n\nconst UNITS = {\n  swordsman: {\n    attack: 3,\n    defense: 5,\n    range: 1,\n    cost: 1,\n    imageUrl: \"https://res.cloudinary.com/mccapes-construction/image/upload/v1518654531/swordsman_yk29xm.png\",\n  },\n  archer: {\n    attack: 3,\n    defense: 1,\n    range: 3,\n    cost: 1,\n    imageUrl: \"https://res.cloudinary.com/mccapes-construction/image/upload/v1518654421/archer_zdvhhi.png\",\n  },\n  spearman: {\n    attack: 3,\n    defense: 3,\n    range: 2,\n    cost: 1,\n    imageUrl: \"https://res.cloudinary.com/mccapes-construction/image/upload/v1518657896/spearman_zkiryf.png\",\n  },\n  orc: {\n    attack: 7,\n    defense: 5,\n    range: 1,\n    cost: 2,\n    imageUrl: \"https://res.cloudinary.com/mccapes-construction/image/upload/v1518665909/orc_lsq1lv.png\",\n  },\n  dwarf: {\n    attack: 5,\n    defense: 7,\n    range: 1,\n    cost: 2,\n    imageUrl: \"https://res.cloudinary.com/mccapes-construction/image/upload/v1518666040/dwarf_thovxo.png\",\n  },\n  elf: {\n    attack: 5,\n    defense: 3,\n    range: 4,\n    cost: 2,\n    imageUrl: \"https://res.cloudinary.com/mccapes-construction/image/upload/v1518666144/elf_zfttuu.png\",\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/unit.js\n// module id = 2\n// module chunks = 0","import Tile from './tile';\nimport {\n  GRID_COORDS,\n } from './grid';\nimport _ from 'lodash';\n\nclass WorldBoard {\n  constructor() {\n    this.grid = this.buildGrid();\n  }\n\n  shuffle(array) {\n    let j, x, i;\n    for (i = array.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = array[i];\n        array[i] = array[j];\n        array[j] = x;\n    }\n    return array;\n  }\n\n  dealTile(x, y, z) {\n    let tile;\n    switch (`[${x}, ${y}, ${z}]`) {\n      case '[0, 0, 0]':\n        return new Tile('center', x, y, z);\n      case '[3, 0, -3]':\n        tile = new Tile('barracks', x, y, z);\n        tile.owner = 'player1';\n        return tile;\n      case '[-3, 0, 3]':\n        tile = new Tile('barracks', x, y, z);\n        tile.owner = 'player2';\n        return tile;\n      default:\n        return new Tile(TILE_STACK.pop(), x, y, z);\n    }\n  }\n\n  buildGrid() {\n    let grid = new Array();\n    for (let i = -3; i < 4; i++) {\n      grid[i] = new Array();\n      for (let j = -3; j < 4; j++) {\n        grid[i][j] = new Array();\n      }\n    }\n    let gridCoords = Object.keys(_.invert(GRID_COORDS)).map(coord => {\n      coord = coord.split(',');\n      return [parseInt(coord[0]), parseInt(coord[1]), parseInt(coord[2])];\n    });\n    gridCoords = this.shuffle(gridCoords);\n    for (let i = 0; i < gridCoords.length; i++) {\n      let x = gridCoords[i][0];\n      let y = gridCoords[i][1];\n      let z = gridCoords[i][2];\n      grid[x][y][z] = this.dealTile(x, y, z);\n    }\n    return grid;\n  }\n}\n\nconst TILE_STACK = [\n  'meadows', 'meadows', 'meadows', 'meadows', 'meadows', 'meadows',\n  'meadows', 'meadows', 'meadows', 'woods', 'woods', 'woods',\n  'woods', 'woods', 'woods', 'woods', 'woods', 'hills', 'hills', 'hills',\n  'hills', 'hills', 'hills', 'hills', 'hills', 'mercenaryCamp',\n  'mercenaryCamp', 'mercenaryCamp', 'orcLonghouse', 'orcLonghouse',\n  'dwarfStronghold', 'dwarfStronghold', 'elfCitadel', 'elfCitadel'\n];\n\nexport default WorldBoard;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/world_board.js\n// module id = 3\n// module chunks = 0","import Unit from './unit';\n\nclass Tile {\n\n  constructor(type, x = 0, y = 0, z = 0) {\n    this.type = type;\n    switch (type) {\n      case 'orcLonghouse':\n        this.owner = 'orc';\n        break;\n      case 'elfCitadel':\n        this.owner = 'elf';\n        break;\n      case 'dwarfStronghold':\n        this.owner = 'dwarf';\n        break;\n      case 'center':\n        this.owner = 'center';\n        break;\n      default:\n        this.owner = 'none';\n        break;\n    }\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    let copied = this.copy(TILES[type]);\n    this.attributes = copied[0];\n    this.units = copied[1].slice();\n    this.availableUnits = this.copy(copied[2]);\n  }\n\n  copy(object) {\n    let copied = {};\n    Object.keys(object).forEach(key => (\n      copied[key] = object[key]\n    ));\n    return copied;\n  }\n\n  setOwner(player) {\n    this.owner = player;\n  }\n\n  addUnit(unit, player) {\n    this.units.push(new Unit(unit, player));\n  }\n\n  selectUnit(unitType) {\n    if (this.units.length > 0) {\n      for (let i = 0; i < this.units.length; i++) {\n        if (this.units[i].type === unitType) return this.units[i];\n      }\n    } else {\n      alert(\"there are no units of that type on this tile\");\n      return false;\n    }\n  }\n\n  spawnUnit(unitType) {\n    if (this.attributes['mayPurchase']) {\n      this.availableUnits[unitType] += 1;\n    } else {\n      alert(\"not a spawn tile\");\n    }\n  }\n\n  removeSpawnUnit(unitType) {\n    if (this.attributes['mayPurchase']) {\n      if (this.availableUnits[unitType] > 0) {\n        this.availableUnits[unitType] -= 1;\n      } else {\n        alert(`this tile has no mare available ${unitType}`);\n      }\n    } else {\n      alert(\"not a spawn tile\");\n    }\n  }\n\n  removePlayerUnit(unit) {\n    delete this.units.unit;\n  }\n\n  getNumUnits(player) {\n    let sum = 0;\n    for (let i = 0; i < this.units.length; i++) {\n      if (this.units[i].owner === player.name) {\n        sum += 1;\n      }\n    }\n    return sum;\n  }\n\n  getNumUnitType(unitType) {\n    let sum = 0;\n    for (let i = 0; i < this.units.length; i++) {\n      if (this.units[i].unitType === unitType) {\n        sum += 1;\n      }\n    }\n    return sum;\n  }\n\n  canMoveUnits() {\n    for (let i = 0; i < this.units.length; i++) {\n      if (!this.units[i].worldMoved) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  display() {\n    switch(this.owner) {\n      case 'player1':\n        return 'rgba(0, 0, 255, 0.2)';\n      case 'player2':\n        return 'rgba(255, 0, 0, 0.2)';\n      default:\n        return 'rgba(0, 255, 0, 0.2)';\n    }\n  }\n}\n\nconst TILES = {\n  meadows: [\n    {\n    mayBuild: true,\n    mayPurchase: false,\n    encounterChance: 0.3,\n    difficultTerrain: false,\n    imageUrl: \"https://res.cloudinary.com/mccapes-construction/image/upload/v1518706954/meadow_y2fjqg.png\",\n    },\n    [],\n    {}\n  ],\n  hills:[\n    {\n      mayBuild: false,\n      mayPurchase: false,\n      encounterChance: 0.7,\n      difficultTerrain: true,\n      imageUrl: \"https://res.cloudinary.com/mccapes-construction/image/upload/v1518706416/hills_ogusis.png\",\n    },\n    [],\n    {}\n  ],\n  woods: [\n    {\n      mayBuild: false,\n      mayPurchase: false,\n      encounterChance: 0.5,\n      difficultTerrain: true,\n      imageUrl: \"https://res.cloudinary.com/mccapes-construction/image/upload/v1518707619/woods_cfs008.png\",\n    },\n    [],\n    {}\n  ],\n  barracks: [\n    {\n      mayBuild: false,\n      mayPurchase: true,\n      encounterChance: 0.0,\n      difficultTerrain: false,\n      imageUrl: \"https://res.cloudinary.com/mccapes-construction/image/upload/v1518707668/barracks_ipv5gd.png\",\n    },\n    [],\n    {\n      swordsman: 2,\n      archer: 2,\n      spearman: 2\n    }\n  ],\n  orcLonghouse: [\n    {\n      mayBuild: false,\n      mayPurchase: true,\n      encounterChance: 1.0,\n      difficultTerrain: false,\n      imageUrl: \"https://res.cloudinary.com/mccapes-construction/image/upload/v1518707994/orc-longhouse_o9ou9c.png\",\n    },\n    [\n      new Unit('orc', { name: 'orc' }),\n      new Unit('orc', { name: 'orc' }),\n    ],\n    {\n      orc: 2\n    }\n  ],\n  dwarfStronghold: [\n    {\n      mayBuild: false,\n      mayPurchase: true,\n      encounterChance: 1.0,\n      difficultTerrain: false,\n      imageUrl: \"https://res.cloudinary.com/mccapes-construction/image/upload/v1518708616/dwarf-stronghold_gw73b8.png\",\n    },\n    [\n      new Unit('dwarf', 'dwarf'),\n      new Unit('dwarf', 'dwarf'),\n    ],\n    {\n      dwarf: 2\n    }\n  ],\n  elfCitadel: [\n    {\n      mayBuild: false,\n      mayPurchase: true,\n      encounterChance: 1.0,\n      difficultTerrain: false,\n      imageUrl: \"https://res.cloudinary.com/mccapes-construction/image/upload/v1518708937/elf-citadel_vgjcnb.png\",\n    },\n    [\n      new Unit('elf', 'elf'),\n      new Unit('elf', 'elf'),\n    ],\n    {\n      elf: 2\n    }\n  ],\n  mercenaryCamp: [\n    {\n      mayBuild: false,\n      mayPurchase: true,\n      encounterChance: 0.0,\n      difficultTerrain: false,\n      imageUrl: \"https://res.cloudinary.com/mccapes-construction/image/upload/v1518709295/mercenary-camp_sh0tih.png\",\n    },\n    [],\n    {\n      elf: 1,\n      dwarf: 1,\n      orc: 1\n    }\n  ],\n  center: [\n    {\n      mayBuild: false,\n      mayPurchase: false,\n      encounterChance: 0.0,\n      difficultTerrain: true,\n      imageUrl: \"https://res.cloudinary.com/mccapes-construction/image/upload/v1518710436/center_a3sm3a.png\",\n    },\n    [],\n    {}\n  ]\n\n};\n\n\nexport default Tile;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/tile.js\n// module id = 4\n// module chunks = 0","import WorldBoard from './world_board';\nimport { gridCoords } from './grid';\n\nclass Player {\n  constructor(name, player, board) {\n    this.name = name;\n    this.gold = 2;\n    this.board = board;\n    this.player = player;\n    this.units = [];\n  }\n\n  tiles() {\n    let tiles = [];\n    for (let i = 0; i < gridCoords.length; i++) {\n      let tile = this.board.grid[gridCoords[i][0]][gridCoords[i][1]][gridCoords[i][2]];\n      if (tile.owner === this.name) {\n        tiles.push(tile);\n      }\n    }\n    return tiles;\n  }\n\n  spawnTiles() {\n    let tiles = this.tiles();\n    let spawnTiles = [];\n    for (let i = 0; i < tiles.length; i++) {\n      if (tiles[i].mayPurchase) spawnTiles.push(tiles[i]);\n    }\n    return spawnTiles;\n  }\n\n  unitTiles() {\n    let tiles = this.tiles();\n    let unitTiles = [];\n    for (let i = 0; i < tiles.length; i++) {\n      if (tiles[i].units.length > 0) unitTiles.push(tiles[i]);\n    }\n    return unitTiles;\n  }\n\n  units() {\n    let unitTiles = this.unitTiles();\n    let units = [];\n    for (let i = 0; i < unitTiles.length; i++) {\n      for (let j = 0; j < unitTiles[i].cards; j++) {\n        units.push(unitTiles[i].cards[j]);\n      }\n    }\n    return units;\n  }\n\n  unitsToMove() {\n    let units = this.units();\n    for (let i = 0; i < units.length; i++) {\n      if (units[i].worldMoved === false) return true;\n    }\n    return false;\n  }\n\n  unitsToAttack() {\n    let units = this.units();\n    for (let i = 0; i < units.length; i++) {\n      if (units[i].attacked === false) return true;\n    }\n    return false;\n  }\n}\n\nexport default Player;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/player.js\n// module id = 5\n// module chunks = 0","import {\n  GRID_COORDS,\n  hexagon,\n  buildHexGrid,\n  selectTile,\n  renderWorldBoard\n } from './grid';\n import WorldBoard from './world_board';\n import Player from './player';\n import Game from './game';\n import _ from 'lodash';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const modal = document.getElementById(\"modal\");\n  const body = document.getElementsByTagName(\"body\")[0];\n  body.addEventListener(\"click\", () => (modal.classList.add(\"close\")));\n  const main = document.getElementById(\"main\");\n\n  let worldBoard = new WorldBoard();\n\n  const canvasEl = document.getElementById(\"canvas\");\n  canvasEl.width = 500;\n  canvasEl.height = 500;\n  const ctx = canvasEl.getContext(\"2d\");\n  ctx.fillStyle = 'rgb(200, 0, 0)';\n  ctx.fillStyle = 'rgb(0, 0, 255)';\n\n  let centers = buildHexGrid(ctx);\n\n  let game = new Game(worldBoard);\n\n  const prompt = document.getElementById(\"prompt\");\n  const buy = document.getElementById(\"buy\");\n  const move = document.getElementById(\"move\");\n  let moveStarted = false;\n  let moveFromTile = {};\n  let moveList = [];\n  const info = document.getElementById(\"info\");\n\n  const clearList = list => {\n    while(list.firstChild) {\n      list.removeChild(list.firstChild);\n    }\n  };\n\n  const buildUnitMoveList = tile => {\n    let units = tile.units;\n    let list = document.getElementById(\"list\");\n    clearList(list);\n    for (let i = 0; i < units.length; i++) {\n      if (!units[i].selected) {\n        let item = document.createElement(\"li\");\n        list.appendChild(item);\n        item.innerHTML = `${units[i].type}: ${units[i].level}`;\n        item.addEventListener(\"click\", () => {\n          units[i].selected = true;\n          buildUnitMoveList(tile);\n        });\n      }\n    }\n    let toMove = document.getElementById(\"units\");\n    clearList(toMove);\n    let toMovePrompt = document.createElement(\"li\");\n    toMovePrompt.innerHTML = \"units to move:\";\n    toMove.appendChild(toMovePrompt);\n    for (let i = 0; i < units.length; i++) {\n      if (units[i].selected) {\n        let item = document.createElement(\"li\");\n        toMove.appendChild(item);\n        item.innerHTML = `${units[i].type}: ${units[i].level}`;\n      }\n    }\n\n  };\n\n  const buildUnitBuyList = tile => {\n    let units = Object.keys(tile.availableUnits);\n    let list = document.getElementById(\"list\");\n    clearList(list);\n    for (let i = 0; i < units.length; i++) {\n      let item = document.createElement(\"li\");\n      list.appendChild(item);\n      item.innerHTML = `${units[i]}: ${tile.availableUnits[units[i]]}`;\n      item.addEventListener(\"click\", () => {\n        if (tile.availableUnits[units[i]] < 1) {\n          alert(\"No available units\");\n        } else if (game.currentPlayer.gold < 1) {\n          alert(\"Not enough gold\");\n        } else {\n          tile.addUnit(units[i], game.currentPlayer);\n          tile.availableUnits[units[i]] -= 1;\n          game.currentPlayer.gold -= 1;\n          buildUnitBuyList(tile);\n          renderWorldBoard(worldBoard, ctx);\n        }\n      });\n    }\n  };\n\n  const buyUnits = tile => {\n    buy.innerHTML = \"Buy Units\";\n    buy.addEventListener(\"click\", () => {\n      if (game.currentPlayer.gold < 0) alert(\"You're out of gold!\");\n      prompt.innerHTML = \"Select units to buy\";\n      buildUnitBuyList(tile);\n    });\n  };\n\n  const moveUnits = tile => {\n    move.innerHTML = \"Move Units\";\n    move.addEventListener(\"click\", () => {\n      prompt.innerHTML = \"Pick units to move\";\n      buildUnitMoveList(tile);\n    });\n  };\n\n  const switchPlayers = () => {\n    if (game.currentPlayer.name === \"player1\") {\n      game.currentPlayer = game.player2;\n    } else {\n      game.currentPlayer = game.player1;\n    }\n    game.currentPlayer.gold += 1;\n    console.log(game.currentPlayer);\n  }\n  const endTurn = document.getElementById(\"end\");\n\n  endTurn.addEventListener(\"click\", switchPlayers);\n\n  prompt.innerHTML = `Choose your action`;\n\n  canvasEl.addEventListener(\n    \"click\",\n    e => {\n    let tile = selectTile(e, worldBoard, canvasEl, centers, ctx);\n    renderWorldBoard(worldBoard, ctx);\n    buy.innerHTML = \"-\";\n\n    if (moveStarted){\n      let fromCoords = [moveFromTile.x, moveFromTile.y, moveFromTile.z];\n      let toCoords = [tile.x, tile.y, tile.z];\n      let oneDiff = false;\n      let twoDiff = false;\n      for (let i = 0; i < toCoords.length; i++) {\n        if (Math.abs(fromCoords[i] - toCoords[i]) === 1) {\n          if (twoDiff) {\n            twoDiff = false;\n            break;\n          }\n          if (oneDiff) {\n            twoDiff = true;\n          } else {\n            oneDiff = true;\n          }\n        }\n        if (Math.abs(fromCoords[i] - toCoords[i]) > 1) {\n          twoDiff = false;\n          break;\n        }\n      }\n      if (twoDiff) {\n        let moveFromUnits = [];\n        let moveToUnits = [];\n        for (let i = 0; i < moveFromTile.units.length; i++) {\n          let unit = moveFromTile.units[i];\n          if (unit.selected) {\n            unit.selected = false;\n            tile.units.push(unit);\n          } else {\n            moveFromUnits.push(unit);\n          }\n        }\n        moveFromTile.units = moveFromUnits;\n        moveStarted = false;\n        tile.owner = moveFromTile.owner;\n        let toMove = document.getElementById(\"units\");\n        clearList(toMove);\n      }\n      renderWorldBoard(worldBoard, ctx);\n    } else {\n      if (tile.attributes.mayPurchase && tile.owner === game.currentPlayer.name) {\n        buyUnits(tile);\n      }\n      if (tile.canMoveUnits()) {\n        moveUnits(tile);\n        moveFromTile = tile;\n        moveStarted = true;\n      }\n    }\n  });\n\n\n  renderWorldBoard(worldBoard, ctx);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/rule_the_realm.js\n// module id = 6\n// module chunks = 0","import Unit from './unit';\nimport Tile from './tile';\nimport Player from './player';\nimport WorldBoard from './world_board';\nimport BattleBoard from './battle_board';\n\nclass Game {\n  constructor(worldBoard) {\n    this.board = worldBoard;\n    this.setPlayers();\n  }\n\n  setPlayers() {\n    this.player1 = new Player('player1', this.board);\n    this.player2 = new Player('player2', this.board);\n    this.currentPlayer = this.player1;\n  }\n\n  isEncounter(tile) {\n    if (tile.owner === 'none') {\n      return tile.attributes['encounterChance'] > Math.random();\n    }\n    return false;\n  }\n\n  isBattle(tile, player) {\n    if (player.name === 'player1') {\n      return tile.owner === 'player2';\n    } else {\n      return tile.owner === 'player1';\n    }\n  }\n\n  battle(player1, player2, tile) {\n    let battleBoard = new BattleBoard(player1, player2, tile);\n    battleBoard.play();\n  }\n\n  switchPlayers() {\n    console.log(this.currentPlayer);\n    if (this.currentPlayer.name === 'player1') {\n      this.currentPlayer = this.player2;\n    } else {\n      this.currentPlayer = this.player1;\n    }\n  }\n\n  // play(prompt) {\n  //   while (!this.isWon()) {\n  //     this.currentPlayer.coin += 1;\n  //     prompt.innerHTML = `${this.currentPlayer.name} choose buy or move`;\n  //   }\n  // }\n\n  isWon() {\n    console.log(this.board);\n    return this.board.grid[3][0][-3].owner === 'player2' ||\n           this.board.grid[-3][0][3].owner === 'player1';\n  }\n}\n\nexport default Game;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game.js\n// module id = 9\n// module chunks = 0","\n\nclass BattleBoard {\n\n}\n\nexport default BattleBoard;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/battle_board.js\n// module id = 10\n// module chunks = 0"],"sourceRoot":""}